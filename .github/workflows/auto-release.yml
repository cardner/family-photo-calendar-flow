
name: Auto Release

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'CHANGELOG.md'
      - 'docs/**'

jobs:
  auto-release:
    name: Auto Release
    runs-on: ubuntu-latest
    outputs:
      skip: ${{ steps.check-release.outputs.skip }}
      version: ${{ steps.set-version.outputs.new_version }}
    permissions:
      contents: write
    if: "${{ !contains(github.event.head_commit.message, '[skip-release]') && !contains(github.event.head_commit.message, 'chore(release)') }}"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Auto-fix security vulnerabilities
        run: |
          echo "Attempting to auto-fix security vulnerabilities before release..."
          npm audit fix --audit-level=high || echo "Some vulnerabilities couldn't be auto-fixed"

      - name: Run tests
        run: npx vitest run

      - name: Security check (high/critical only)
        run: |
          AUDIT_RESULT=$(npm audit --audit-level=high --json || echo '{}')
          HIGH_CRITICAL_COUNT=$(echo "$AUDIT_RESULT" | jq -r '.metadata.vulnerabilities.high + .metadata.vulnerabilities.critical // 0' 2>/dev/null || echo "0")
          
          if [ "$HIGH_CRITICAL_COUNT" -gt 0 ]; then
            echo "❌ Cannot release with high/critical vulnerabilities"
            npm audit --audit-level=high
            exit 1
          fi

      - name: Check if release needed
        id: check-release
        run: |
          # Get latest commit message
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          
          # Always release for merge commits (PRs)
          if [[ $COMMIT_MSG =~ ^Merge\ pull\ request ]]; then
            echo "skip=false" >> $GITHUB_OUTPUT
            echo "Release needed for merged PR: $COMMIT_MSG"
          # Skip release for certain commit types (but not for breaking changes)
          elif [[ $COMMIT_MSG =~ ^(docs|style|test|chore|ci)(\(.+\))?: ]] && [[ ! $COMMIT_MSG =~ ! ]]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "Skipping release for commit type: $(echo $COMMIT_MSG | cut -d: -f1)"
          else
            echo "skip=false" >> $GITHUB_OUTPUT
            echo "Release needed for commit: $COMMIT_MSG"
          fi

      - name: Determine version bump
        id: version-bump
        if: steps.check-release.outputs.skip == 'false'
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          
          # Check for breaking changes
          if [[ $COMMIT_MSG =~ BREAKING\ CHANGE ]] || [[ $COMMIT_MSG =~ ! ]]; then
            echo "type=major" >> $GITHUB_OUTPUT
          # For merge commits, check the PR description (second line onwards)
          elif [[ $COMMIT_MSG =~ ^Merge\ pull\ request ]]; then
            # Extract the description line (usually after blank line)
            if [[ $COMMIT_MSG =~ feat[:\(] ]] || [[ $COMMIT_MSG =~ ^feat ]]; then
              echo "type=minor" >> $GITHUB_OUTPUT
            else
              echo "type=patch" >> $GITHUB_OUTPUT
            fi
          # For direct commits, check the first line
          elif [[ $COMMIT_MSG =~ ^feat(\(.+\))?: ]]; then
            echo "type=minor" >> $GITHUB_OUTPUT
          else
            echo "type=patch" >> $GITHUB_OUTPUT
          fi

      - name: Configure Git
        if: steps.check-release.outputs.skip == 'false'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Bump version and create release
        id: set-version
        if: steps.check-release.outputs.skip == 'false'
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          
          # Calculate new version based on bump type
          BUMP_TYPE="${{ steps.version-bump.outputs.type }}"
          
          if [ "$BUMP_TYPE" = "major" ]; then
            NEW_VERSION=$(node -p "
              const [major, minor, patch] = '$CURRENT_VERSION'.split('.').map(Number);
              \`\${major + 1}.0.0\`
            ")
          elif [ "$BUMP_TYPE" = "minor" ]; then
            NEW_VERSION=$(node -p "
              const [major, minor, patch] = '$CURRENT_VERSION'.split('.').map(Number);
              \`\${major}.\${minor + 1}.0\`
            ")
          else
            NEW_VERSION=$(node -p "
              const [major, minor, patch] = '$CURRENT_VERSION'.split('.').map(Number);
              \`\${major}.\${minor}.\${patch + 1}\`
            ")
          fi
          
          # Check if tag already exists
          if git rev-parse "v$NEW_VERSION" >/dev/null 2>&1; then
            echo "⚠️ Tag v$NEW_VERSION already exists, finding next available version..."
            
            # Find next available patch version
            PATCH_NUM=$(echo $NEW_VERSION | cut -d. -f3)
            BASE_VERSION=$(echo $NEW_VERSION | cut -d. -f1-2)
            
            while git rev-parse "v$BASE_VERSION.$PATCH_NUM" >/dev/null 2>&1; do
              PATCH_NUM=$((PATCH_NUM + 1))
            done
            
            NEW_VERSION="$BASE_VERSION.$PATCH_NUM"
            echo "📝 Using next available version: v$NEW_VERSION"
          fi
          
          # Update version.json
          BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%S.%03dZ")
          GIT_HASH=$(git rev-parse --short HEAD)
          BUILD_NUMBER=$(($(cat public/version.json | grep -o '"buildNumber": [0-9]*' | grep -o '[0-9]*') + 1))
          
          cat > public/version.json << EOF
          {
            "version": "$NEW_VERSION",
            "buildDate": "$BUILD_DATE",
            "gitHash": "$GIT_HASH",
            "buildNumber": $BUILD_NUMBER,
            "environment": "production"
          }
          EOF
          
          # Commit and tag with error handling
          git add public/version.json
          git commit -m "chore(release): bump version to $NEW_VERSION [skip-release]"
          
          # Create tag with error handling
          if ! git tag "v$NEW_VERSION"; then
            echo "❌ Failed to create tag v$NEW_VERSION"
            exit 1
          fi
          
          # Push changes with retry logic
          MAX_RETRIES=3
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if git push origin main && git push origin "v$NEW_VERSION"; then
              echo "✅ Successfully pushed changes and tag"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              echo "⚠️ Push failed, attempt $RETRY_COUNT of $MAX_RETRIES"
              
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "🔄 Retrying in 5 seconds..."
                sleep 5
                
                # Pull latest changes before retry
                git pull origin main --rebase || true
              else
                echo "❌ Failed to push after $MAX_RETRIES attempts"
                exit 1
              fi
            fi
          done
          
          # Create simple release notes
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          echo "## Auto Release v$NEW_VERSION" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "**Changes:**" >> RELEASE_NOTES.md
          echo "- $COMMIT_MSG" >> RELEASE_NOTES.md
          
          echo "version=$NEW_VERSION" >> $GITHUB_ENV
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: steps.check-release.outputs.skip == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ steps.set-version.outputs.new_version }}"
          release_name: "Auto Release v${{ steps.set-version.outputs.new_version }}"
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false

  # Top-level job: invoke the deploy workflow as a reusable workflow
  deploy-pages-bridge:
    name: Invoke Deploy Pages
    needs: auto-release
    uses: ./.github/workflows/deploy-pages.yml
    permissions:
      contents: read
      pages: write
      id-token: write
    if: ${{ needs.auto-release.result == 'success' && needs.auto-release.outputs.skip == 'false' }}
    secrets: inherit
