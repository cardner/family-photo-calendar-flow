
name: Auto Release

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'CHANGELOG.md'
      - '.github/**'
      - 'docs/**'

jobs:
  auto-release:
    name: Auto Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: "!contains(github.event.head_commit.message, '[skip-release]') && !contains(github.event.head_commit.message, 'chore(release)')"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test

      - name: Check if release needed
        id: check-release
        run: |
          # Get latest commit message
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          
          # Skip release for certain commit types
          if [[ $COMMIT_MSG =~ ^(docs|style|test|chore|ci)(\(.+\))?: ]] && [[ ! $COMMIT_MSG =~ ! ]]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "Skipping release for commit type: $(echo $COMMIT_MSG | cut -d: -f1)"
          else
            echo "skip=false" >> $GITHUB_OUTPUT
            echo "Release needed for commit: $COMMIT_MSG"
          fi

      - name: Determine version bump
        id: version-bump
        if: steps.check-release.outputs.skip == 'false'
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          
          if [[ $COMMIT_MSG =~ BREAKING\ CHANGE ]] || [[ $COMMIT_MSG =~ ! ]]; then
            echo "type=major" >> $GITHUB_OUTPUT
          elif [[ $COMMIT_MSG =~ ^feat(\(.+\))?: ]]; then
            echo "type=minor" >> $GITHUB_OUTPUT
          else
            echo "type=patch" >> $GITHUB_OUTPUT
          fi

      - name: Configure Git
        if: steps.check-release.outputs.skip == 'false'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Bump version and create release
        if: steps.check-release.outputs.skip == 'false'
        run: |
          # Bump version
          NEW_VERSION=$(npm version ${{ steps.version-bump.outputs.type }} --no-git-tag-version)
          NEW_VERSION=${NEW_VERSION#v}
          
          # Update version.json
          BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%S.%03dZ")
          GIT_HASH=$(git rev-parse --short HEAD)
          BUILD_NUMBER=$(($(cat public/version.json | grep -o '"buildNumber": [0-9]*' | grep -o '[0-9]*') + 1))
          
          cat > public/version.json << EOF
          {
            "version": "$NEW_VERSION",
            "buildDate": "$BUILD_DATE",
            "gitHash": "$GIT_HASH",
            "buildNumber": $BUILD_NUMBER,
            "environment": "production"
          }
          EOF
          
          # Commit and tag
          git add package.json package-lock.json public/version.json
          git commit -m "chore(release): bump version to $NEW_VERSION [skip-release]"
          git tag "v$NEW_VERSION"
          
          # Push changes
          git push origin main
          git push origin "v$NEW_VERSION"
          
          # Create simple release notes
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          echo "## Auto Release v$NEW_VERSION" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "**Changes:**" >> RELEASE_NOTES.md
          echo "- $COMMIT_MSG" >> RELEASE_NOTES.md
          
          echo "version=$NEW_VERSION" >> $GITHUB_ENV

      - name: Create GitHub Release
        if: steps.check-release.outputs.skip == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ env.version }}"
          release_name: "Auto Release v${{ env.version }}"
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false
