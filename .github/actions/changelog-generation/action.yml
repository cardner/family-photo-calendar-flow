
name: 'Generate Changelog'
description: 'Generate changelog from git commits'
outputs:
  changelog:
    description: 'Generated changelog content'
    value: ${{ steps.changelog.outputs.changelog }}
runs:
  using: 'composite'
  steps:
    - name: Generate changelog
      id: changelog
      shell: bash
      run: |
        # Get commits since last tag for changelog
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -z "$LAST_TAG" ]; then
          COMMITS=$(git log --pretty=format:"%h %s" HEAD --reverse)
        else
          COMMITS=$(git log --pretty=format:"%h %s" ${LAST_TAG}..HEAD --reverse)
        fi
        
        # Generate changelog sections
        FEATURES=""
        FIXES=""
        BREAKING=""
        OTHER=""
        
        while IFS= read -r commit; do
          if [[ $commit =~ ^[a-f0-9]+\ feat(\(.+\))?!?: ]]; then
            if [[ $commit =~ ! ]]; then
              BREAKING="$BREAKING\n- ${commit#* }"
            else
              FEATURES="$FEATURES\n- ${commit#* }"
            fi
          elif [[ $commit =~ ^[a-f0-9]+\ fix(\(.+\))?: ]]; then
            FIXES="$FIXES\n- ${commit#* }"
          elif [[ $commit =~ BREAKING\ CHANGE ]]; then
            BREAKING="$BREAKING\n- ${commit#* }"
          else
            OTHER="$OTHER\n- ${commit#* }"
          fi
        done <<< "$COMMITS"
        
        # Build changelog
        CHANGELOG="## What's Changed\n"
        
        if [ -n "$BREAKING" ]; then
          CHANGELOG="$CHANGELOG\n### 💥 Breaking Changes\n$BREAKING\n"
        fi
        
        if [ -n "$FEATURES" ]; then
          CHANGELOG="$CHANGELOG\n### 🚀 Features\n$FEATURES\n"
        fi
        
        if [ -n "$FIXES" ]; then
          CHANGELOG="$CHANGELOG\n### 🐛 Bug Fixes\n$FIXES\n"
        fi
        
        if [ -n "$OTHER" ]; then
          CHANGELOG="$CHANGELOG\n### 📝 Other Changes\n$OTHER\n"
        fi
        
        # Save changelog to file for release notes
        echo -e "$CHANGELOG" > RELEASE_NOTES.md
        
        # Output for GitHub step
        {
          echo 'changelog<<EOF'
          echo -e "$CHANGELOG"
          echo EOF
        } >> $GITHUB_OUTPUT
